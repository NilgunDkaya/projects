/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hw2;

/**
 *
 * @author Nilgun
 */
public class MinHeapSort 
{
    public void sort(Patient[] array)
    {
        int n = array.length;
 
        // Build heap (rearrange array)
        for (int i = n / 2 - 1; i >= 0; i--)
            heapify(array, n, i);
 
        // One by one extract an element from heap
        for (int i=n-1; i>=0; i--)
        {
            // Move current root to end
            Patient temp = array[0];
            array[0] = array[i];
            array[i] = temp;
 
            // call max heapify on the reduced heap
            heapify(array, i-1, 0);
        }
    }  
    void heapify(Patient array[], int n, int i)
    {
        int largest = i;  // Initialize largest as root
        int left = 2*i +1;  // left = 2*i + 1
        int right = 2*i + 2;  // right = 2*i + 2
 
        // If left child is larger than root
        if (left < n && array[left] != null && array[left].getWeight() <array[largest].getWeight())
            largest = left;
 
        // If right child is larger than largest so far
        if (right < n && array[right] != null && array[right].getWeight() <= array[largest].getWeight())
            largest = right;
 
        // If largest is not root
        if (largest != i)
        {
            Patient swap = array[i];
            array[i] = array[largest];
            array[largest] = swap;
 
            // Recursively heapify the affected sub-tree
            heapify(array, n, largest);
        }
    }
}
