package hw;

public class prim {
	static int V;
	 void printMST(int parent[], int n, int graph[][],Node node)
	    {
		    String[]cities=node.city;
	        for (int i = 1; i < V; i++) {       	
	           int y=parent[i];
	           
	           System.out.print(cities[y].trim()+" - ");
	          System.out.print(cities[i].trim()+" , ");
	        }
	    }
	 int minKey(int key[], Boolean mstSet[])
	    {
	        
	        int min = Integer.MAX_VALUE, min_index=-1;
	 
	        for (int v = 0; v < V; v++)
	            if (mstSet[v] == false && key[v] < min)
	            {
	                min = key[v];
	                min_index = v;
	            }
	 
	        return min_index;
	    }
	 void mst(Node n)
	    {
	     V=n.city.length;
	     
	    	
		 int[][] graph=n.adj;
		 
	        int parent[] = new int[V];
	 
	        
	        int key[] = new int [V];
	 
	        
	        Boolean mstSet[] = new Boolean[V];
	 
	        
	        for (int i = 0; i < V; i++)
	        {
	        	
	            key[i] = Integer.MAX_VALUE;
	            mstSet[i] = false;
	        }
	 
	        
	        key[0] = 0;    
	        parent[0] = -1; 
	 
	      
	        for (int count = 0; count < V-1; count++)
	        {
	            // Pick thd minimum key vertex from the set of vertices
	            // not yet included in MST
	        	int u=0;
	        	if(minKey(key, mstSet)>0)
	               u = minKey(key, mstSet);
	           
	          
	            // Add the picked vertex to the MST Set
	              mstSet[u] = true;
	 
	            // Update key value and parent index of the adjacent
	            // vertices of the picked vertex. Consider only those
	            // vertices which are not yet included in MST
	            for (int v = 0; v < V; v++)
	 
	                // graph[u][v] is non zero only for adjacent vertices of m
	                // mstSet[v] is false for vertices not yet included in MST
	                // Update the key only if graph[u][v] is smaller than key[v]
	                if (graph[u][v]!=0 && mstSet[v] == false &&
	                    graph[u][v] <  key[v])
	                {
	                    parent[v]  = u;
	                    key[v] = graph[u][v];
	                }
	        }
	        printMST(parent, V, graph,n);
}
}
